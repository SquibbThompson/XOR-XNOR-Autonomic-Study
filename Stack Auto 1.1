import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Define the necessary functions before they are called

def build_matrix(gate_choice):
    xor_table = [
        [1, 1, 0],
        [1, 0, 1],
        [0, 1, 1],
        [0, 0, 0]
    ]

    xnor_table = [
        [1, 1, 1],
        [1, 0, 0],
        [0, 1, 0],
        [0, 0, 1]
    ]

    if gate_choice == 1:
        matrix = xor_table
    elif gate_choice == 0:
        matrix = xnor_table
    else:
        raise ValueError("Invalid gate choice. Please enter either 0 (for XNOR) or 1 (for XOR).")

    return np.array(matrix)

def stack_matrix(matrix, num_vertical_stacks, num_horizontal_stacks):
    for _ in range(num_vertical_stacks - 1):
        matrix = np.vstack((matrix, np.flip(matrix, axis=0)))

    for _ in range(num_horizontal_stacks - 1):
        matrix = np.hstack((matrix, np.flip(matrix, axis=1)))

    return matrix

def update_matrix(matrix):
    updated_matrix = matrix.copy()
    height, width = matrix.shape

    for i in range(height):
        for j in range(width):
            n_black = 0
            for x in range(max(i - 1, 0), min(i + 2, height)):
                for y in range(max(j - 1, 0), min(j + 2, width)):
                    if (x, y) != (i, j) and matrix[x, y] == 1:
                        n_black += 1

            if matrix[i, j] == 0 and n_black == 2:
                updated_matrix[i, j] = 1
            elif matrix[i, j] == 1 and n_black % 2 == 1:
                updated_matrix[i, j] = 0

                for x, y in [(i - 1, j - 1), (i - 1, j + 1), (i + 1, j - 1), (i + 1, j + 1)]:
                    if 0 <= x < height and 0 <= y < width and matrix[x, y] == 1:
                        updated_matrix[x, y] = 0

    return updated_matrix

def animate(matrix, num_iterations):
    fig, ax = plt.subplots()

    def update(num):
        nonlocal matrix
        ax.clear()
        ax.imshow(matrix, cmap='binary')
        ax.set_title(f'Iteration {num+1}')
        matrix = update_matrix(matrix)

    anim = FuncAnimation(fig, update, frames=num_iterations, repeat=False)
    plt.show()

# Request user inputs
gate_choice = int(input("Enter 0 for XNOR or 1 for XOR: "))
num_vertical_stacks = int(input("Enter the number of vertical stacks: "))
num_horizontal_stacks = int(input("Enter the number of horizontal stacks: "))
num_iterations = int(input("Enter the number of iterations: "))

# Build, stack, and animate the matrix
initial_matrix = build_matrix(gate_choice)
stacked_matrix = stack_matrix(initial_matrix, num_vertical_stacks, num_horizontal_stacks)

# Animate the matrix
animate(stacked_matrix, num_iterations)
